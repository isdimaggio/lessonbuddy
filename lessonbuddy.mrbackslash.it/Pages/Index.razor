@attribute [Authorize]
@page "/"
@using lessonbuddy.mrbackslash.it.Entities
@using lessonbuddy.mrbackslash.it.Services

@inject ISnackbar Snackbar

@inject IDialogService dialogService
@inject SessionsService sessionService

@if (authenticationState.User.IsInRole("Administrators"))
{
	<h1>Cruscotto amministratore</h1>
}
else
{
	<h1>Cruscotto utente</h1>
}

<style>

    .mud-table-container {
        height: calc(100vh - 350px);
    }

</style>

<br />
<InputFile id="fileInput" OnChange="UploadFiles" hidden accept=".lbd" />
<MudButton HtmlTag="label"
           Variant="Variant.Filled"
           Color="Color.Secondary"
           StartIcon="@Icons.Filled.CloudUpload"
           for="fileInput">
    Carica una nuova sessione
</MudButton>
<br />
<br />

<MudTable 
	Items="@sessions" 
	Dense="false" 
	Hover="true" 
	ReadOnly="false" 
	CanCancelEdit="true" 
	Filter="new Func<Session,bool>(FilterFunc)" 
    @bind-SelectedItem="selectedItem" 
    SortLabel="Ordina per" 
    CommitEditTooltip="Salva" 
    OnCommitEditClick="@(() => SaveSession())"
    RowEditPreview="BackupItem" 
    RowEditCancel="ResetItemToOriginalValues"
    @ref="@sessionDataTable"
>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Elenco sessioni caricate</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <ColGroup>

        @if(isAdmin)
        {
            <col style="width:20%;" />
            <col style="width:20%;" />
            <col style="width:15%;" />
            <col style="width:20%" />
            <col style="width:11%" />
            <col style="width:14%" />
        }
        else
        {
            <col style="width:25%;" />
            <col style="width:20%;" />
            <col style="width:25%" />
            <col style="width:16%" />
            <col style="width:14%" />
        }

    </ColGroup>

    <HeaderContent>
        <MudTh>Identificativo</MudTh>

        @if(isAdmin)
        {
            <MudTh><MudTableSortLabel SortBy="new Func<Session, object>(x=>x.Username)">Nome utente</MudTableSortLabel></MudTh>
        }

        <MudTh><MudTableSortLabel SortBy="new Func<Session, object>(x=>x.Subject)">Soggetto</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Session, object>(x=>x.Location)">Luogo</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<Session, object>(x=>x.UploadDateTime)">Data caricamento</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Identificativo">@context.Guidsession</MudTd>

        @if(isAdmin)
        {
            <MudTd DataLabel="Nome utente">@context.Username</MudTd>
        }

        <MudTd DataLabel="Soggetto">@context.Subject</MudTd>
        <MudTd DataLabel="Luogo">@context.Location</MudTd>
        <MudTd DataLabel="Data">@context.UploadDateTime.Value.ToString("dd/MM/yyyy HH:mm:ss")</MudTd>

        <MudTd DataLabel="">
                <MudFab Color="Color.Tertiary" Icon="@Icons.Material.Filled.AutoGraph" OnClick="@(() => OpenGraphDialog(context))" ></MudFab>
                <span style="color: white;">a</span>
                @if (isAdmin)
                {
                    <MudFab Color="Color.Error" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteSessionDialog(context))" ></MudFab>
                }
        </MudTd>
        
    </RowTemplate>

    <RowEditingTemplate>
        <MudTd DataLabel="Identificativo">@context.Guidsession</MudTd>

        @if (isAdmin)
        {
            <MudTd DataLabel="Nome utente">
                <MudTextField @bind-Value="@context.Username" Required />
            </MudTd>
        }

        <MudTd DataLabel="Soggetto">
            <MudTextField @bind-Value="@context.Subject" Required />
        </MudTd>
        <MudTd DataLabel="Luogo">
            <MudTextField @bind-Value="@context.Location" Required />
        </MudTd>
        <MudTd DataLabel="Data caricamento">@context.UploadDateTime.Value.ToString("dd/MM/yyyy HH:mm:ss")</MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {

    [CascadingParameter]
	private Task<AuthenticationState> AuthenticationStateTask { get; set; }
	private AuthenticationState authenticationState;

    private MudTable<Session> sessionDataTable;

    private List<Session> sessions;
    private string searchString = "";

    private Session selectedItem = null;
    private Session elementBeforeEdit;
    private Session elementToDelete;

    private DialogOptions graphDialogOptions;
    private DialogParameters graphDialogParameters;
    private DialogParameters deleteDialogParameters;

    private bool isAdmin = false;

    private void OpenGraphDialog(Session session)
    {
        graphDialogParameters = new DialogParameters();
        graphDialogParameters.Add("Session", session);        

        dialogService.Show<GraphDialog>("", graphDialogParameters, graphDialogOptions);
    }

    private void DeleteSessionDialog(Session session)
    {
        deleteDialogParameters = new DialogParameters();
        deleteDialogParameters.Add("Session", session); 
        deleteDialogParameters.Add("SessionService", sessionService);
        
        dialogService.Show<DeleteDialog>("Eliminare la sessione?", deleteDialogParameters);
    }

    protected void LoadSessions()
    {
        if (!isAdmin)
		{
			sessions = sessionService.GetAll().Where(s => s.Username == authenticationState.User.Identity.Name).ToList();
		}
		else
		{
			sessions = sessionService.GetAll();
		}
    }

    protected override async Task OnInitializedAsync()
	{
		authenticationState = await AuthenticationStateTask;

		if (authenticationState.User.Identity.IsAuthenticated)
		{
			if (authenticationState.User.IsInRole("Administrators"))
			{
				isAdmin = true;
			}
        }

        LoadSessions();

        graphDialogOptions = new DialogOptions
        {
            FullScreen = true,
            CloseButton = true,
            DisableBackdropClick = true,
            NoHeader = true,
            Position = DialogPosition.Center            
        };		
	}	

    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
        {            
            Username = ((Session)element).Username,
            Subject = ((Session)element).Subject,
            Location = ((Session)element).Location,
            UploadDateTime = ((Session)element).UploadDateTime
        };
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((Session)element).Username = elementBeforeEdit.Username;
        ((Session)element).Subject = elementBeforeEdit.Subject;
        ((Session)element).Location = elementBeforeEdit.Location;
        ((Session)element).UploadDateTime = elementBeforeEdit.UploadDateTime;
    }

	private bool FilterFunc(Session session)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (session.Username.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (session.Subject.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (session.Location.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void SaveSession()
    {
        sessionService.Update(selectedItem);
    }

    IList<IBrowserFile> files = new List<IBrowserFile>();
    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            files.Add(file);
        }

        string result = "";

        foreach (var file in files)
        {
            result = await sessionService.Upload(file, authenticationState.User.Identity.Name);
        }

        if(result == "Sessione caricata correttamente")
        {
            Snackbar.Add(result, Severity.Success);
        }
        else
        {
            Snackbar.Add(result, Severity.Error);
        }

        LoadSessions();

        //await sessionDataTable.ReloadServerData();

    }
}
